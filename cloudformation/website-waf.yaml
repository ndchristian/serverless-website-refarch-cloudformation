# Copyright 2020 Nicholas Christian

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a basic structure for WAF and an example lambda function that defends against malicious IPs.
Parameters:
  RequestThreshold:
    Type: Number
    Default: '50'
    Description: 'Enter the maximum bad requests per minute, per IP. Default: 50'
  WAFBlockPeriod:
    Type: Number
    Default: '240'
    Description: 'Enter duration (in minutes) the IP should be blocked for. Default:
      4 hours (240 minutes)'
  LambdaBucket:
    Type: String
    Description: The S3 bucket where the lambda function packages will be stored.
  PoC:
    Type: String
    Description: Person of Contact. Must be an email.
    AllowedPattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
  Application:
    Type: String
    Description: This value will be added to each resource name and tag in order to
      identify the application. Will also be used as a way to identify resources in
      code and IAM.
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  Environment:
    Type: String
    Description: The environment these resources are for. Value will be appended onto
      the end of the resource names.
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  BusinessUnit:
    Type: String
    Description: The domain/subdomain/unit to assign this stack to.
Resources:
  WAFManualBlockSet:
    Type: AWS::WAF::IPSet
    Properties:
      Name: Manual Block Set
  WAFAutoBlockSet:
    Type: AWS::WAF::IPSet
    Properties:
      Name: Auto Block Set
  WAFManualBlockRule:
    Type: AWS::WAF::Rule
    Properties:
      Name: !Sub '${Application}-manualblock-${Environment}'
      MetricName: ManualBlockRule
      Predicates:
        - DataId: !Ref 'WAFManualBlockSet'
          Negated: false
          Type: IPMatch
  WAFAutoBlockRule:
    Type: AWS::WAF::Rule
    Properties:
      Name: !Sub '${Application}-autoblock-${Environment}'
      MetricName: AutoBlockRule
      Predicates:
        - DataId: !Ref 'WAFAutoBlockSet'
          Negated: false
          Type: IPMatch
  WAFWebACL:
    Type: AWS::WAF::WebACL
    Properties:
      Name: Malicious Requesters
      DefaultAction:
        Type: ALLOW
      MetricName: MaliciousRequesters
      Rules:
        - Action:
            Type: BLOCK
          Priority: 1
          RuleId: !Ref 'WAFManualBlockRule'
        - Action:
            Type: BLOCK
          Priority: 2
          RuleId: !Ref 'WAFAutoBlockRule'
  WAFBlacklistingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref 'WAFBlacklistingPolicy'
  WAFBlacklistingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub 'Adds permissions for the lambda function: ${Application}-deletion-${Environment}'
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 0
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${Application}-primary-logging-${Environment}/*'
          - Sid: 1
            Effect: Allow
            Action:
              - waf:GetChangeToken
              - waf:GetIPSet
              - waf:UpdateIPSet
            Resource:
              - !Sub 'arn:${AWS::Partition}:waf::${AWS::AccountId}:ipset/${WAFAutoBlockSet}'
              - !Sub 'arn:${AWS::Partition}:waf::${AWS::AccountId}:ipset/${WAFManualBlockSet}'
              - !Sub 'arn:aws:waf::${AWS::AccountId}:changetoken/*'
          - Sid: 2
            Effect: Allow
            Action: 
              - cloudwatch:PutMetricData
            Resource: '*'
          - Sid: 3
            Effect: Allow
            Action:
              - logs:GetLogEvents
              - logs:PutLogEvents
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
            Resource:
              - !GetAtt 'WAFBlacklistingLogGroup.Arn'
              - !Sub '${WAFBlacklistingLogGroup.Arn}:log-stream:*'
      ManagedPolicyName: !Sub '${Application}-maliciousips-policy-${Environment}'
  WAFBlacklistingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Application}-maliciousips-${Environment}'
      RetentionInDays: 7
  WAFBlacklistingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Application}-maliciousips-${Environment}'
      Description: !Sub '${RequestThreshold}:${WAFBlockPeriod}'
      Handler: index.handler
      Role: !GetAtt 'WAFBlacklistingRole.Arn'
      Code:
        S3Bucket: !Ref 'LambdaBucket'
        S3Key: !Sub '${Application}/${Environment}/maliciousips.zip'
      Runtime: python3.7
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          OUTPUT_BUCKET: !Sub '${Application}-primary-logging-bucket-${Environment}'
          IP_SET_ID_MANUAL_BLOCK: !Ref 'WAFManualBlockSet'
          IP_SET_ID_AUTO_BLOCK: !Ref 'WAFAutoBlockSet'
          BLACKLIST_BLOCK_PERIOD: !Ref 'WAFBlockPeriod'
          REQUEST_PER_MINUTE_LIMIT: !Ref 'RequestThreshold'
      Tags:
        - Key: PoC
          Value: !Ref 'PoC'
        - Key: Name
          Value: !Sub '${Application}-maliciousips-${Environment}'
        - Key: Application
          Value: !Ref 'Application'
        - Key: Environment
          Value: !Ref 'Environment'
        - Key: BusinessUnit
          Value: !Ref 'BusinessUnit'
        - Key: ApplicationRole
          Value: operations
        - Key: Confidentiality
          Value: Non-Public
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'WAFBlacklistingFunction.Arn'
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
Outputs:
  RequestThreshold:
    Description: Request Threshold
    Value: !Ref 'RequestThreshold'
  WAFBlockPeriod:
    Description: WAF Block Period
    Value: !Ref 'WAFBlockPeriod'
  ManualBlockIPSetID:
    Description: Manual Block IP Set ID
    Value: !Ref 'WAFManualBlockSet'
  AutoBlockIPSetID:
    Description: Auto Block IP Set ID
    Value: !Ref 'WAFAutoBlockSet'
  WAFACLID:
    Description: The ACL ID of the WAF
    Value: !Ref 'WAFWebACL'
    Export:
      Name: !Sub '${Application}-webaclid-${Environment}'
  MaliciousIpLambdaARN:
    Description: Lambda ARN of the function that keeps track of malicious ips
    Value: !GetAtt 'WAFBlacklistingFunction.Arn'
    Export:
      Name: !Sub '${Application}-wafblacklistingfunction-${Environment}'
